name: Publish
on:
  release:
    types: [published]
    branches: [master]

jobs:
  test_and_build_and_publish:
    strategy:
      matrix:
        python-version: [ 3.6, 3.8 ]
        os: [ macos-latest, ubuntu-latest, windows-latest ]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Check version
        if: matrix.os == "ubuntu-latest"
        run: |
          python -m pip install --upgrade pip
          pip install torchcde
          pypi_info=$(pip list | grep torchcde)
          pypi_version=$(echo ${pypi_info} | cut -d " " -f2)
          pip uninstall -y torchcde
          python setup.py install
          master_info=$(pip list | grep torchcde)
          master_version=$(echo ${master_info} | cut -d " " -f2)
          pip uninstall -y torchcde
          python -c "import itertools as it;
          import sys;
          _, pypi_version, master_version = sys.argv;
          pypi_version_ = [int(i) for i in pypi_version.split('.')];
          master_version_ = [int(i) for i in master_version.split('.')];
          pypi_version__ = tuple(p for m, p in it.zip_longest(master_version_, pypi_version_, fillvalue=0));
          master_version__ = tuple(m for m, p in it.zip_longest(master_version_, pypi_version_, fillvalue=0));
          sys.exit(master_version__ <= pypi_version__)" ${pypi_version} ${master_version}

      - name: Install dependencies
        run: |
          pip install flake8 pytest

      - name: Lint with flake8
        run: |
          flake8 .

      - name: Build and install sdist
        run: |
          python setup.py sdist bdist_wheel
          python install dist/*.tar.gz

      - name: Install Signatory
        if: matrix.os != "macos-latest"
        run: |
          signatory_version=${python -c "import re
          import subprocess
          version_msg = subprocess.run('pip install --use-deprecated=legacy-resolver signatory==', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
          version_re = re.compile(rb'from versions: ([0-9\. ,]*)\)')
          last_version = version_re.search(version_msg.stderr).group(1).split(b', ')[-1].decode('utf-8').split('.')
          assert len(last_version) == 6
          last_version = '.'.join(last_version[:3])
          print(last_version)"}
          torch_info=$(pip list | grep '^torch ')
          torch_version=$(echo ${torch_info} | cut -d " " -f2)
          python -m pip install signatory==${signatory_version}.${torch_version}

      - name: Run sdist tests
        run: |
          pytest
          pip uninstall -y torchcde
          
      - name: Run bdist_wheel tests
        run: |
          python install dist/*.whl
          pytest
          pip uninstall -y torchcde

      - name: Publish to PyPI
        if: matrix.python-version == '3.8' && matrix.os == 'ubuntu-latest'
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
